#!/bin/bash

set -e

dockerCmd="docker compose"
if (( $# == 2 )); then
    dockerCmd="docker-compose"
fi

if (( $# < 1 )); then
    echo "Illegal number of parameters"
    echo "usage: services [create|start|stop]"
    exit 1
fi

loadData () {
#	addDatabaseIndex
	docker run --rm -v $(pwd)/import-entities:/import-entities \
		-e ORION_HOST="${ORION_HOST}" \
		-e ORION_PORT="${ORION_PORT}" \
		--entrypoint /bin/ash curlimages/curl import-entities
	docker run --rm -v $(pwd)/provision-services:/provision-services \
		-e ORION_HOST="${ORION_HOST}" \
		-e ORION_PORT="${ORION_PORT}" \
		-e IOTA_JSON_HOST="${IOTA_JSON_HOST}" \
		-e IOTA_JSON_NORTH_PORT="${IOTA_JSON_NORTH_PORT}" \
		--entrypoint /bin/ash curlimages/curl provision-services
	docker run --rm -v $(pwd)/provision-devices:/provision-devices \
		-e ORION_HOST="${ORION_HOST}" \
		-e ORION_PORT="${ORION_PORT}" \
		-e IOTA_JSON_HOST="${IOTA_JSON_HOST}" \
		-e IOTA_JSON_NORTH_PORT="${IOTA_JSON_NORTH_PORT}" \
		--entrypoint /bin/ash curlimages/curl provision-devices
	docker run --rm -v $(pwd)/subscription-entities:/subscription-entities \
		-e ORION_HOST="${ORION_HOST}" \
		-e ORION_PORT="${ORION_PORT}" \
		-e QUANTUMLEAP_HOST="${QUANTUMLEAP_HOST}" \
		-e QUANTUMLEAP_PORT="${QUANTUMLEAP_PORT}" \
		--entrypoint /bin/ash curlimages/curl subscription-entities
	echo ""
}


addDatabaseIndex () {
	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mOrion\033[0m  ..."
	kubectl exec -n fiware -it pod/"${MONGO_POD_NAME}" -- /bin/bash '
	conn = new Mongo();
	db.createCollection("orion-openiot");
	db = conn.getDB("orion-openiot");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1}); 
	db.entities.createIndex({"_id.id": 1});' > /dev/null
	exit
	echo -e " \033[1;32mdone\033[0m"

	printf "Adding appropriate \033[1mMongoDB\033[0m indexes for \033[1;34mIoT-Agent\033[0m  ..."
	kubectl exec -n fiware -it pod/"${MONGO_POD_NAME}" -- /bin/bash '
	conn = new Mongo();
	db = conn.getDB("iotagent-json");
	db.createCollection("devices");
	db.devices.createIndex({"_id.service": 1, "_id.id": 1, "_id.type": 1});
	db.devices.createIndex({"_id.type": 1}); 
	db.devices.createIndex({"_id.id": 1});
	db.createCollection("groups");
	db.groups.createIndex({"_id.resource": 1, "_id.apikey": 1, "_id.service": 1});
	db.groups.createIndex({"_id.type": 1});' > /dev/null
	exit
	echo -e " \033[1;32mdone\033[0m"
}

wait () {
	echo -e "\n‚è≥ Waiting for 7 seconds\n"
	sleep 7
}

command="$1"
case "${command}" in
	"help")
        echo "usage: services [create|start|stop]"
        ;;
	"create")
		export $(cat .env | grep "#" -v)
		echo "Pulling Docker images"
		docker pull curlimages/curl
		${dockerCmd} pull 
		;;
	 "provision")
		export $(cat .env | grep "#" -v)
		echo -e "Starting containers: \033[1;34mOrion\033[0m, \033[1;34mQuantumLeap\033[0m, \033[1;36mIoT-Agent\033[0m, \033[1mTutorial\033[0m, a \033[1mGrafana\033[0m metrics dashboard, \033[1mCrateDB\033[0m and \033[1mMongoDB\033[0m databases and a \033[1mRedis\033[0m cache."
		echo -e "- \033[1;34mOrion\033[0m is the context broker"
		echo -e "- \033[1;34mQuantumLeap\033[0m will write to CrateDB"
		echo -e "- \033[1mGrafana\033[0m will read from CrateDB"
		echo -e "- \033[1;36mIoT-Agent\033[0m is configured for the UltraLight Protocol"
		echo -e "- \033[1mTutorial\033[0m acts as a series of dummy IoT Sensors over MQTT"
		echo ""
		loadData
		cd ../Publisher-Agent && ${dockerCmd} up -d
		;;
	"start")
		cd ./CSV-Data-Sender && ${dockerCmd} up -d
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|start|stop]"
		exit 127;
		;;
esac